// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace test {

static const char* MyService_method_names[] = {
  "/test.MyService/DoStuff",
};

std::unique_ptr< MyService::Stub> MyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MyService::Stub> stub(new MyService::Stub(channel));
  return stub;
}

MyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DoStuff_(MyService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MyService::Stub::DoStuff(::grpc::ClientContext* context, const ::test::Request& request, ::test::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoStuff_, context, request, response);
}

void MyService::Stub::experimental_async::DoStuff(::grpc::ClientContext* context, const ::test::Request* request, ::test::Response* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoStuff_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::test::Response>* MyService::Stub::AsyncDoStuffRaw(::grpc::ClientContext* context, const ::test::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::Response>::Create(channel_.get(), cq, rpcmethod_DoStuff_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::test::Response>* MyService::Stub::PrepareAsyncDoStuffRaw(::grpc::ClientContext* context, const ::test::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::Response>::Create(channel_.get(), cq, rpcmethod_DoStuff_, context, request, false);
}

MyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MyService::Service, ::test::Request, ::test::Response>(
          std::mem_fn(&MyService::Service::DoStuff), this)));
}

MyService::Service::~Service() {
}

::grpc::Status MyService::Service::DoStuff(::grpc::ServerContext* context, const ::test::Request* request, ::test::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace test

